C51 COMPILER V9.52.0.0   CALIBRATION                                                       02/25/2019 16:36:50 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATION
OBJECT MODULE PLACED IN .\Obj\Calibration.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Calibration.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTE
                    -ND PRINT(.\Lis\Calibration.lst) TABS(2) OBJECT(.\Obj\Calibration.obj)

line level    source

   1          //#include "ADCh.h"
   2          #include "stc15f2k60s2.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "ADCh.h"
   6          void Wait_ms(int ms);
   7          unsigned int ADC_GetResult(unsigned char ch);
   8          void Move(float  distance, bit direction);
   9          unsigned int Max_Value(unsigned int *input);
  10          void Update_position(unsigned char mnths,unsigned char dys,
  11                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  12                               float  *currnt_pos, float offset_calib);
  13          unsigned int Day_Of_Year(unsigned char months_bcd,unsigned char days_bcd); // this function is used to cou
             -nt the date in a year example: 22 March is the 80th day of the year
  14          void WriteData(unsigned char dat);
  15          void Command(unsigned char dat);//dat=0x0X
  16          void Display_Pos(float sign_dat);
  17          // read adc ch to sense the voltage of the solar panel.     
  18          
  19          int voltage_is_stable(void)
  20          {
  21   1        unsigned int sample_voltage[10];
  22   1        int i,ch=0;
  23   1        for (i=0; i<10;i++)
  24   1        {
  25   2              sample_voltage[i]=ADC_GetResult(ch);
  26   2        }
  27   1        
  28   1        for(i=1;i<=9;i++)
  29   1        {
  30   2              if(abs(sample_voltage[i]-sample_voltage[0])>ADC_Stable_Threshold)
  31   2                return 0;
  32   2        }
  33   1        return 1;
  34   1      }
  35          void  Find_Real_Max(float  *current_position, unsigned int *max_ADC_value,unsigned int *max_ADC_JP_value)
  36          {
  37   1          unsigned char ch=0;
  38   1          float calib_step_move=0.5;
  39   1          unsigned int voltage_at_scanned_pos[60],max_location;
  40   1          int i;
  41   1          // move/scan +`
  42   1          for(i=0;i<60;i++)
  43   1          {
  44   2            voltage_at_scanned_pos[i]=0;
  45   2          }
  46   1          for(i=0;i<60;i++)
  47   1          {
  48   2              if(ADC_GetResult(2)>=sunlight_ADC_Threshold)
  49   2              {
  50   3                Move(calib_step_move,1);
  51   3                *current_position=*current_position+0.5;
  52   3                voltage_at_scanned_pos[i]=ADC_GetResult(ch);
  53   3                if(i==29)
C51 COMPILER V9.52.0.0   CALIBRATION                                                       02/25/2019 16:36:50 PAGE 2   

  54   3                {
  55   4                  *max_ADC_JP_value=voltage_at_scanned_pos[29];
  56   4                }
  57   3                  
  58   3              }
  59   2              else
  60   2              {
  61   3                // go back to JP max position
  62   3                if(i<=29)
  63   3                  Move(calib_step_move*(29-(i-1)),1);//
  64   3                  //*current_position=*current_position+calib_step_move*(29-i);
  65   3                else
  66   3                  Move(calib_step_move*(i-1-29),0);// 
  67   3                
  68   3                *current_position=*current_position+calib_step_move*(29-(i-1));
  69   3                break;// break FOR LOOP
  70   3              }
  71   2              
  72   2              //move cursor to line 1, pos 6
  73   2              //Write_PI4IOE5V96248(&dat);
  74   2              Command(0x08);
  75   2              Command(0x05);
  76   2              
  77   2              WriteData(0x41);//display "A"
  78   2              WriteData(0x44);//display "D"
  79   2              WriteData(0x43);//display "C" 
  80   2              WriteData(0x3A);//display ":" 
  81   2              //LCD_clear();
  82   2              //real_voltage=(float)voltage_at_scanned_pos[i]/1024*5;
  83   2              Display_Pos((float)voltage_at_scanned_pos[i]/1024*5);
  84   2              WriteData(0x56);//display "V" 
  85   2              WriteData(0x10);//display " " 
  86   2              Wait_ms(1500);
  87   2          }
  88   1      
  89   1          if(i==60)// make sure that all of the calibration value are scanned with GOOD SUN
  90   1          {
  91   2            max_location=Max_Value(voltage_at_scanned_pos);//max_location in an array [0,...,39]
  92   2            *max_ADC_value=voltage_at_scanned_pos[max_location];
  93   2            // move to the optimal position in the area of +/-10mm from JP max theorical pos
  94   2            Move(calib_step_move*(59-max_location),0);
  95   2            *current_position=*current_position-calib_step_move*(59-max_location);
  96   2            Wait_ms(500);
  97   2          }
  98   1      
  99   1      }
 100          
 101          
 102          unsigned int Max_Value(unsigned int *input)
 103          {
 104   1        unsigned int max=0,max_location=29,i;
 105   1        //int i;
 106   1        for(i=0;i<=59;i++)
 107   1        {
 108   2          max=max>*(input+i)? max:*(input+i);
 109   2          if (max==*(input+i)&& max!=0)
 110   2            max_location=i;
 111   2        }
 112   1        return max_location;// pos in the array
 113   1        
 114   1      }
 115          //input currnt_pos is the JP max theorical position
C51 COMPILER V9.52.0.0   CALIBRATION                                                       02/25/2019 16:36:50 PAGE 3   

 116          float calibration(unsigned char mnths,unsigned char dys,
 117                               unsigned char hurs,unsigned char mns,unsigned char sconds,
 118                               float  *currnt_pos,unsigned int *max_ADC_Val,float *theorical_max_pos,unsigned int *max_ADC_JP_
             -value)
 119          {
 120   1        float calib_value=0;
 121   1        unsigned int max_ADC=0;//
 122   1        
 123   1        float JP_max_pos=*currnt_pos;
 124   1        *max_ADC_Val=0;
 125   1        *max_ADC_JP_value=0;
 126   1        *theorical_max_pos=0;
 127   1        // if voltage is stable 
 128   1        if(voltage_is_stable())
 129   1        {
 130   2          //  move to JP theorical max position-15
 131   2          Update_position(mnths,dys,hurs,mns,sconds,&JP_max_pos,-15);// off set is Zero means we go to  (first, go
             - to JP max theorical position -5)
 132   2          *theorical_max_pos=JP_max_pos+15;// compensate +15 because of previous line.
 133   2          //  find the real max value in the area of JP +/- 15mm
 134   2          Find_Real_Max(&JP_max_pos,&max_ADC,&max_ADC_JP_value); //find real max and move to real max position
*** WARNING C182 IN LINE 134 OF Calibration.c: pointer to different objects
 135   2          *max_ADC_Val=max_ADC;
 136   2          calib_value=JP_max_pos-*theorical_max_pos;
 137   2          *currnt_pos=JP_max_pos;
 138   2          return calib_value;
 139   2        }
 140   1        else
 141   1          return 0;
 142   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1467    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     193
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
