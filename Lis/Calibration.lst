C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/29/2020 17:24:49 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATION
OBJECT MODULE PLACED IN .\Obj\Calibration.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Calibration.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTEND 
                    -PRINT(.\Lis\Calibration.lst) TABS(2) OBJECT(.\Obj\Calibration.obj)

line level    source

   1          //#include "ADCh.h"
   2          #include "stc15f2k60s2.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "ADCh.h"
   6          #include "AT25SF041.h"
   7          #include "SI1120.h"
   8          #include "UART1.h"
   9          #include "PCF85063BTL.h"
  10          
  11          #define  offset_error 0.8
  12          unsigned char BCDtoDec1(unsigned char bcd);
  13          void Wait_ms(int ms);
  14          unsigned int ADC_GetResult(unsigned char ch);
  15          void Move(float  distance, bit direction);
  16          unsigned int Max_Value(unsigned int *input);
  17          void Update_position(unsigned char mnths,unsigned char dys,
  18                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  19                               float  *currnt_pos, float offset_calib);
  20          unsigned int Day_Of_Year(unsigned char months_bcd,unsigned char days_bcd); // this function is used to cou
             -nt the date in a year example: 22 March is the 80th day of the year
  21          void WriteData(unsigned char dat);
  22          void Command(unsigned char dat);//dat=0x0X
  23          void Display_Pos(float sign_dat);
  24          // read adc ch to sense the voltage of the solar panel.     
  25          
  26          int voltage_is_stable(void)
  27          {
  28   1        unsigned int sample_voltage[10];
  29   1        int i,ch=0;
  30   1        for (i=0; i<10;i++)
  31   1        {
  32   2              sample_voltage[i]=ADC_GetResult(ch);
  33   2        }
  34   1        
  35   1        for(i=1;i<=9;i++)
  36   1        {
  37   2              if(abs(sample_voltage[i]-sample_voltage[0])>ADC_Stable_Threshold)
  38   2                return 0;
  39   2        }
  40   1        return 1;
  41   1      }
  42          void  Find_Real_Max(float  *current_position, unsigned int *calib_max_ADC_Value,unsigned int *max_ADC_JP_v
             -alue, unsigned long int *address_to_write)
  43          {
  44   1          unsigned char seconds,mins, hours,days,months;
  45   1      
  46   1          unsigned char ch=0;
  47   1          float calib_step_move=0.5,JPPos;
  48   1          char sTemp[9];
  49   1          //float offset_error=0.8;
  50   1          int voltage_at_scanned_pos[81],max_location, avg_voltage=0,new_voltage_at_scanned_pos=0,old_voltage_at_s
             -canned_pos=0;
  51   1          int i,j;
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/29/2020 17:24:49 PAGE 2   

  52   1          //float offset_error=0.8;
  53   1          // move/scan +`
  54   1          pwm_time_min=0;
  55   1          pwm_time_max=0;
  56   1          JPPos=*current_position+20;
  57   1          for(i=0;i<81;i++)// 81 values
  58   1          {
  59   2            voltage_at_scanned_pos[i]=0;
  60   2          }
  61   1          for(i=0;i<81;i++)
  62   1          {
  63   2              //if(ADC_GetResult(2)>=sunlight_ADC_Threshold)
  64   2              {
  65   3                //avg_voltage=0;
  66   3                for(j=0;j<5;j++)
  67   3                {
  68   4                  if(j==0)
  69   4                  {
  70   5                    avg_voltage=0;
  71   5                  }
  72   4                  avg_voltage+=ADC_GetResult(ch);
  73   4                  Wait_ms(2);
  74   4      
  75   4                }
  76   3                voltage_at_scanned_pos[i]=avg_voltage/5;
  77   3                // Voltage from current sensor is used to calaculate POWER.
  78   3      //====================================================          
  79   3                sprintf(sTemp, "%.4f", JPPos);
  80   3                //    itoa((int)current_position,sCurrent_position,10);
  81   3                SendString("AT+CIPSEND=9\r\n");
  82   3                Wait_ms(200);
  83   3                SendString(sTemp);
  84   3                SendString("J\r\n");
  85   3                Wait_ms(400); 
  86   3      //====================================================          
  87   3                sprintf(sTemp, "%.4f", (float)voltage_at_scanned_pos[i]/1024*5);
  88   3                //    itoa((int)current_position,sCurrent_position,10);
  89   3                SendString("AT+CIPSEND=9\r\n");
  90   3                Wait_ms(200);
  91   3                SendString(sTemp);
  92   3                SendString("W\r\n");
  93   3                Wait_ms(200);
  94   3              
  95   3      
  96   3                //Delay_ms(10);
  97   3                if(pwm_time_min!=0)
  98   3                {
  99   4                  pwm_time_min=pwm_time_min<pwm_time?pwm_time_min:pwm_time;
 100   4                }
 101   3                else
 102   3                  pwm_time_min=pwm_time;
 103   3                
 104   3                pwm_time_max=pwm_time_max>pwm_time?pwm_time_max:pwm_time;
 105   3                //  Because the uC Flash Memory is almost full, 
 106   3                //  so I did not change/increase the size of "struct data_to_store"
 107   3                //  STORE THE CALIB VOLTAGE IN THE SPI NOR FLASH after every calib, total 4*60=240 byte of data for e
             -ach calib time
 108   3                //if(i%2==0)
 109   3                {
 110   4      //            AT25SF041_WriteEnable();
 111   4      //            //Wait_ms_SPINOR(50); 
 112   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,pwm_time/4);                 // SUNLIGHT         
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/29/2020 17:24:49 PAGE 3   

 113   4      //            Wait_ms_SPINOR(50); 
 114   4      //            ++*address_to_write;
 115   4      //            
 116   4      //            AT25SF041_WriteEnable();
 117   4      //            //Wait_ms_SPINOR(50); 
 118   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,voltage_at_scanned_pos[i]/4);// SOLAR CELL AD
             -C VOLTAGE  
 119   4      //            Wait_ms_SPINOR(50); 
 120   4      //            ++*address_to_write;
 121   4      //            
 122   4      //            AT25SF041_WriteEnable();
 123   4      //            //Wait_ms_SPINOR(50); 
 124   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,*current_position);          // SOLAR CELL Instant
             - Position when calib
 125   4      //            Wait_ms_SPINOR(50); 
 126   4      //            ++*address_to_write;  
 127   4      //            
 128   4      //            AT25SF041_WriteEnable();
 129   4      //            //Wait_ms_SPINOR(50); 
 130   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,(*current_position-(char)*current_position)*1
             -00);  // SOLAR CELL Instant Position when calib
 131   4      //            Wait_ms_SPINOR(50); 
 132   4      //            ++*address_to_write;
 133   4        
 134   4                }
 135   3                
 136   3              }
 137   2              /*else
 138   2              {
 139   2                // go back to JP max position
 140   2                if(i<=29)
 141   2                  Move(calib_step_move*(29-(i-1)),1);//
 142   2                  //*current_position=*current_position+calib_step_move*(29-i);
 143   2                else
 144   2                  Move(calib_step_move*(i-1-29),0);// 
 145   2                
 146   2                *current_position=*current_position+calib_step_move*(29-(i-1));
 147   2                break;// break FOR LOOP
 148   2              }*/
 149   2              
 150   2              //move cursor to line 1, pos 6
 151   2              //Write_PI4IOE5V96248(&dat);
 152   2              Command(0x08);
 153   2              Command(0x05);
 154   2              
 155   2              WriteData(0x41);//display "A"
 156   2              WriteData(0x44);//display "D"
 157   2              WriteData(0x43);//display "C" 
 158   2              WriteData(0x3A);//display ":" 
 159   2              //LCD_clear();
 160   2              //real_voltage=(float)voltage_at_scanned_pos[i]/1024*5;
 161   2              Display_Pos((float)voltage_at_scanned_pos[i]/1024*5);
 162   2              WriteData(0x56);//display "V" 
 163   2              WriteData(0x10);//display " " 
 164   2              Wait_ms(200);
 165   2              
 166   2              sprintf(sTemp, "%.4f", *current_position);
 167   2              //    itoa((int)current_position,sCurrent_position,10);
 168   2              SendString("AT+CIPSEND=9\r\n");
 169   2              Wait_ms(200);
 170   2              SendString(sTemp);
 171   2              SendString("M\r\n");
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/29/2020 17:24:49 PAGE 4   

 172   2      
 173   2              Wait_ms(200);
 174   2      
 175   2              sprintf(sTemp, "%.4f", pwm_time);
 176   2              //    itoa((int)current_position,sCurrent_position,10);
 177   2              SendString("AT+CIPSEND=9\r\n");
 178   2              Wait_ms(200);
 179   2              SendString(sTemp);
 180   2              SendString("L\r\n");
 181   2              Wait_ms(200);
 182   2              Move(calib_step_move,1);//1: positive direction
 183   2              *current_position=*current_position+0.5;
 184   2      
 185   2              //Delay_ms(10);       
 186   2              Wait_ms(200);// delay to wait for the electronic load to be stable.
 187   2              Read_time(&months,&days,&hours,&mins,&seconds);
 188   2              
 189   2              sprintf(sTemp, "%.4f",(float) BCDtoDec1(hours)+(float)BCDtoDec1(mins)/60+(float)BCDtoDec1(seconds&0x7F
             -)/3600);
 190   2              SendString("AT+CIPSEND=9\r\n");
 191   2              Wait_ms(200);
 192   2              SendString(sTemp);
 193   2              SendString("T\r\n");                  
 194   2              Wait_ms(200);
 195   2      
 196   2          }
 197   1          Wait_ms(1000);
 198   1      
 199   1          if(i==81)// make sure that all of the calibration value are scanned with GOOD SUN
 200   1          {
 201   2            max_location=Max_Value(voltage_at_scanned_pos);//max_location in an array [0,...,80]
*** WARNING C182 IN LINE 201 OF Calibration.c: pointer to different objects
 202   2            *calib_max_ADC_Value=voltage_at_scanned_pos[max_location];
 203   2      
 204   2            *max_ADC_JP_value=voltage_at_scanned_pos[40];
 205   2          
 206   2            // move to the optimal position in the area of +/-10mm from JP max theorical pos
 207   2            Move(calib_step_move*(81-max_location),0);//83-81= 2 steps is the offset error
 208   2      //      Command(0x08);
 209   2      //      Command(0x06);
 210   2      //      
 211   2      //      WriteData(0x50);//display "P"
 212   2      //      //WriteData(0x4F);//display ""
 213   2      //      WriteData(0x53);//display "S" 
 214   2      //      WriteData(0x3A);//display ":" 
 215   2      //      //LCD_clear();
 216   2      //      Display_Pos(83-max_location);
 217   2      
 218   2            *current_position=*current_position-(calib_step_move*(81-max_location));
 219   2            // Use extra fucntion to correct the mechanical changing position error.
 220   2            // go back some more steps and find the max point by reading new power value 
 221   2            //==================================================
 222   2            for(i=0;i<=20;i++)
 223   2            {
 224   3              Move(calib_step_move,0);//
 225   3              Wait_ms(1000);
 226   3              //avg_voltage=0;
 227   3              for(j=0;j<5;j++)
 228   3              {
 229   4                if(j==0)
 230   4                {
 231   5                  avg_voltage=0;
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/29/2020 17:24:49 PAGE 5   

 232   5                }
 233   4                avg_voltage+=ADC_GetResult(ch);
 234   4                Wait_ms(2);
 235   4      
 236   4              }
 237   3              new_voltage_at_scanned_pos=avg_voltage/5;     
 238   3              if(new_voltage_at_scanned_pos<=old_voltage_at_scanned_pos)
 239   3              {
 240   4                *current_position=*current_position-0.5; // try to compensate the mechanical error
 241   4                old_voltage_at_scanned_pos=0;     
 242   4                new_voltage_at_scanned_pos=0;     
 243   4      
 244   4      
 245   4                break;
 246   4              }
 247   3              old_voltage_at_scanned_pos=new_voltage_at_scanned_pos;      
 248   3      
 249   3            }
 250   2            
 251   2            //==================================================
 252   2            sprintf(sTemp, "%.4f", *current_position);
 253   2            //    itoa((int)current_position,sCurrent_position,10);
 254   2            SendString("AT+CIPSEND=9\r\n");
 255   2            Wait_ms(200);
 256   2            SendString(sTemp);
 257   2            SendString("M\r\n");
 258   2            Wait_ms(200);
 259   2            
 260   2            Read_time(&months,&days,&hours,&mins,&seconds);
 261   2            sprintf(sTemp, "%.4f",(float) BCDtoDec1(hours)+(float)BCDtoDec1(mins)/60+(float)BCDtoDec1(seconds&0x7F)
             -/3600);
 262   2            SendString("AT+CIPSEND=9\r\n");
 263   2            Wait_ms(200);
 264   2            SendString(sTemp);
 265   2            SendString("T\r\n");                  
 266   2            Wait_ms(200);     
 267   2          }
 268   1          return ;
 269   1      
 270   1      }
*** WARNING C280 IN LINE 42 OF Calibration.c: 'address_to_write': unreferenced local variable
 271          
 272          
 273          unsigned int Max_Value(unsigned int *input)
 274          {
 275   1        unsigned int max=0,max_location=40,i;
 276   1        //int i;
 277   1        for(i=0;i<81;i++) //total 81 diff values
 278   1        {
 279   2          max=max>*(input+i)? max:*(input+i);
 280   2          if (max==*(input+i)&& max!=0)
 281   2            max_location=i;
 282   2        }
 283   1        return max_location;// pos in the array
 284   1        
 285   1      }
 286          //input currnt_pos is the JP max theorical position
 287          float calibration(    unsigned char mnths,unsigned char dys,
 288                                unsigned char hurs,unsigned char mns,unsigned char sconds,
 289                                float  *currnt_pos,unsigned int *calib_max_ADC_Val,float *theorical_max_pos,
 290                                unsigned int *max_ADC_JP_value,unsigned long int *NOR_address_to_write)
 291          {
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/29/2020 17:24:49 PAGE 6   

 292   1        float calib_value=0;
 293   1        unsigned int temporary_calib_max_ADC=0,temp_max_ADC_JP_value=0;//
 294   1        unsigned long int temp_NOR_address_to_write=*NOR_address_to_write;
 295   1        float JP_max_pos=*currnt_pos;
 296   1        //char sTemp[8];
 297   1        *calib_max_ADC_Val=0;
 298   1        *max_ADC_JP_value=0;
 299   1        *theorical_max_pos=0;
 300   1        pwm_time_min=0;
 301   1        pwm_time_max=0;
 302   1        // if voltage is stable 
 303   1        if(voltage_is_stable())
 304   1        {
 305   2          //  move to JP theorical max position-20
 306   2          Update_position(mnths,dys,hurs,mns,sconds,&JP_max_pos,-20);// off set is Zero means we go to  (first, go
             - to JP max theorical position -20)
 307   2          *theorical_max_pos=JP_max_pos+20;// compensate +20 because of previous line.
 308   2          //============================================================================
 309   2      
 310   2          //=============================================================================
 311   2          //  find the real max value in the area of JP +/- 15mm
 312   2          Find_Real_Max(&JP_max_pos,&temporary_calib_max_ADC,&temp_max_ADC_JP_value,&temp_NOR_address_to_write); /
             -/find real max and move to real max position
 313   2          
 314   2          *NOR_address_to_write=temp_NOR_address_to_write;
 315   2          
 316   2          *calib_max_ADC_Val=temporary_calib_max_ADC;
 317   2          *max_ADC_JP_value=temp_max_ADC_JP_value;
 318   2          calib_value=JP_max_pos-*theorical_max_pos;
 319   2          *currnt_pos=JP_max_pos;
 320   2          return calib_value;
 321   2        }
 322   1        else
 323   1          return 0;
 324   1      }
 325          int FindClosestSamedayCalibTime(int *input_calibration_bool_array,int current_time_stamp_position)
 326          {
 327   1        int i;
 328   1        for(i=current_time_stamp_position;i>=0;i--)
 329   1        {
 330   2          if(*(input_calibration_bool_array+i)==1)// find the closest calibrated time stamp
 331   2            return i;// return the position in the array
 332   2          else 
 333   2            return 0;
 334   2        }
 335   1        return 0;
 336   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2873    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =   ----     273
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
