C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/30/2019 16:32:02 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATION
OBJECT MODULE PLACED IN .\Obj\Calibration.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Calibration.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTE
                    -ND PRINT(.\Lis\Calibration.lst) TABS(2) OBJECT(.\Obj\Calibration.obj)

line level    source

   1          //#include "ADCh.h"
   2          #include "stc15f2k60s2.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "ADCh.h"
   6          #include "AT25SF041.h"
   7          #include "SI1120.h"
   8          #include "UART1.h"
   9          
  10          #define  offset_error 0.8
  11          
  12          void Wait_ms(int ms);
  13          unsigned int ADC_GetResult(unsigned char ch);
  14          void Move(float  distance, bit direction);
  15          unsigned int Max_Value(unsigned int *input);
  16          void Update_position(unsigned char mnths,unsigned char dys,
  17                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  18                               float  *currnt_pos, float offset_calib);
  19          unsigned int Day_Of_Year(unsigned char months_bcd,unsigned char days_bcd); // this function is used to cou
             -nt the date in a year example: 22 March is the 80th day of the year
  20          void WriteData(unsigned char dat);
  21          void Command(unsigned char dat);//dat=0x0X
  22          void Display_Pos(float sign_dat);
  23          // read adc ch to sense the voltage of the solar panel.     
  24          
  25          int voltage_is_stable(void)
  26          {
  27   1        unsigned int sample_voltage[10];
  28   1        int i,ch=0;
  29   1        for (i=0; i<10;i++)
  30   1        {
  31   2              sample_voltage[i]=ADC_GetResult(ch);
  32   2        }
  33   1        
  34   1        for(i=1;i<=9;i++)
  35   1        {
  36   2              if(abs(sample_voltage[i]-sample_voltage[0])>ADC_Stable_Threshold)
  37   2                return 0;
  38   2        }
  39   1        return 1;
  40   1      }
  41          void  Find_Real_Max(float  *current_position, unsigned int *calib_max_ADC_Value,unsigned int *max_ADC_JP_v
             -alue, unsigned long int *address_to_write)
  42          {
  43   1          unsigned char ch=0;
  44   1          float calib_step_move=0.5;
  45   1          char sTemp[6];
  46   1          //float offset_error=0.8;
  47   1          int voltage_at_scanned_pos[81],max_location, avg_voltage=0;
  48   1          int i,j;
  49   1          //float offset_error=0.8;
  50   1          // move/scan +`
  51   1          pwm_time_min=0;
  52   1          pwm_time_max=0;
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/30/2019 16:32:02 PAGE 2   

  53   1          for(i=0;i<81;i++)// 81 values
  54   1          {
  55   2            voltage_at_scanned_pos[i]=0;
  56   2          }
  57   1          for(i=0;i<81;i++)
  58   1          {
  59   2              //if(ADC_GetResult(2)>=sunlight_ADC_Threshold)
  60   2              {
  61   3                //avg_voltage=0;
  62   3                for(j=0;j<5;j++)
  63   3                {
  64   4                  if(j==0)
  65   4                  {
  66   5                    avg_voltage=0;
  67   5                  }
  68   4                  avg_voltage+=ADC_GetResult(ch);
  69   4                  Wait_ms(2);
  70   4      
  71   4                }
  72   3                voltage_at_scanned_pos[i]=avg_voltage/5;
  73   3                // Voltage from current sensor is used to calaculate POWER.
  74   3                sprintf(sTemp, "%.1f", voltage_at_scanned_pos[i]);
  75   3                //    itoa((int)current_position,sCurrent_position,10);
  76   3                SendString("AT+CIPSEND=6\r\n");
  77   3                Wait_ms(200);
  78   3                SendString(sTemp);
  79   3                SendString("W\r\n");
  80   3                Wait_ms(800);
  81   3              
  82   3      
  83   3                //Delay_ms(10);
  84   3                if(pwm_time_min!=0)
  85   3                {
  86   4                  pwm_time_min=pwm_time_min<pwm_time?pwm_time_min:pwm_time;
  87   4                }
  88   3                else
  89   3                  pwm_time_min=pwm_time;
  90   3                
  91   3                pwm_time_max=pwm_time_max>pwm_time?pwm_time_max:pwm_time;
  92   3                //  Because the uC Flash Memory is almost full, 
  93   3                //  so I did not change/increase the size of "struct data_to_store"
  94   3                //  STORE THE CALIB VOLTAGE IN THE SPI NOR FLASH after every calib, total 4*60=240 byte of data for e
             -ach calib time
  95   3                //if(i%2==0)
  96   3                {
  97   4      //            AT25SF041_WriteEnable();
  98   4      //            //Wait_ms_SPINOR(50); 
  99   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,pwm_time/4);                 // SUNLIGHT         
 100   4      //            Wait_ms_SPINOR(50); 
 101   4      //            ++*address_to_write;
 102   4      //            
 103   4      //            AT25SF041_WriteEnable();
 104   4      //            //Wait_ms_SPINOR(50); 
 105   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,voltage_at_scanned_pos[i]/4);// SOLAR CELL AD
             -C VOLTAGE  
 106   4      //            Wait_ms_SPINOR(50); 
 107   4      //            ++*address_to_write;
 108   4      //            
 109   4      //            AT25SF041_WriteEnable();
 110   4      //            //Wait_ms_SPINOR(50); 
 111   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,*current_position);          // SOLAR CELL Instant
             - Position when calib
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/30/2019 16:32:02 PAGE 3   

 112   4      //            Wait_ms_SPINOR(50); 
 113   4      //            ++*address_to_write;  
 114   4      //            
 115   4      //            AT25SF041_WriteEnable();
 116   4      //            //Wait_ms_SPINOR(50); 
 117   4      //            AT25SF041_Write(Byte_Page_Program, *address_to_write,(*current_position-(char)*current_position)*1
             -00);  // SOLAR CELL Instant Position when calib
 118   4      //            Wait_ms_SPINOR(50); 
 119   4      //            ++*address_to_write;
 120   4        
 121   4                }
 122   3                
 123   3              }
 124   2              /*else
 125   2              {
 126   2                // go back to JP max position
 127   2                if(i<=29)
 128   2                  Move(calib_step_move*(29-(i-1)),1);//
 129   2                  //*current_position=*current_position+calib_step_move*(29-i);
 130   2                else
 131   2                  Move(calib_step_move*(i-1-29),0);// 
 132   2                
 133   2                *current_position=*current_position+calib_step_move*(29-(i-1));
 134   2                break;// break FOR LOOP
 135   2              }*/
 136   2              
 137   2              //move cursor to line 1, pos 6
 138   2              //Write_PI4IOE5V96248(&dat);
 139   2              Command(0x08);
 140   2              Command(0x05);
 141   2              
 142   2              WriteData(0x41);//display "A"
 143   2              WriteData(0x44);//display "D"
 144   2              WriteData(0x43);//display "C" 
 145   2              WriteData(0x3A);//display ":" 
 146   2              //LCD_clear();
 147   2              //real_voltage=(float)voltage_at_scanned_pos[i]/1024*5;
 148   2              Display_Pos((float)voltage_at_scanned_pos[i]/1024*5);
 149   2              WriteData(0x56);//display "V" 
 150   2              WriteData(0x10);//display " " 
 151   2              Wait_ms(200);
 152   2              
 153   2              sprintf(sTemp, "%.1f", *current_position);
 154   2          //    itoa((int)current_position,sCurrent_position,10);
 155   2              SendString("AT+CIPSEND=6\r\n");
 156   2                Wait_ms(200);
 157   2              SendString(sTemp);
 158   2              SendString("M\r\n");
 159   2              
 160   2                Wait_ms(200);
 161   2              
 162   2              sprintf(sTemp, "%.1f", pwm_time/4);
 163   2          //    itoa((int)current_position,sCurrent_position,10);
 164   2              SendString("AT+CIPSEND=6\r\n");
 165   2                Wait_ms(200);
 166   2              SendString(sTemp);
 167   2              SendString("L\r\n");        
 168   2              Move(calib_step_move,1);//1: positive direction
 169   2              *current_position=*current_position+0.5;
 170   2      
 171   2          //Delay_ms(10);       
 172   2              Wait_ms(500);// delay to wait for the electronic load to be stable.
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/30/2019 16:32:02 PAGE 4   

 173   2      
 174   2          }
 175   1          Wait_ms(1000);
 176   1      
 177   1          if(i==81)// make sure that all of the calibration value are scanned with GOOD SUN
 178   1          {
 179   2            max_location=Max_Value(voltage_at_scanned_pos);//max_location in an array [0,...,80]
*** WARNING C182 IN LINE 179 OF Calibration.c: pointer to different objects
 180   2            *calib_max_ADC_Value=voltage_at_scanned_pos[max_location];
 181   2      
 182   2            *max_ADC_JP_value=voltage_at_scanned_pos[40];
 183   2          
 184   2            // move to the optimal position in the area of +/-10mm from JP max theorical pos
 185   2            Move(calib_step_move*(83-max_location),0);//83-81= 2 steps is the offset error
 186   2      //      Command(0x08);
 187   2      //      Command(0x06);
 188   2      //      
 189   2      //      WriteData(0x50);//display "P"
 190   2      //      //WriteData(0x4F);//display ""
 191   2      //      WriteData(0x53);//display "S" 
 192   2      //      WriteData(0x3A);//display ":" 
 193   2      //      //LCD_clear();
 194   2      //      Display_Pos(83-max_location);
 195   2            *current_position=*current_position-(calib_step_move*(83-max_location));
 196   2            sprintf(sTemp, "%.1f", *current_position);
 197   2          //    itoa((int)current_position,sCurrent_position,10);
 198   2              SendString("AT+CIPSEND=6\r\n");
 199   2                Wait_ms(200);
 200   2              SendString(sTemp);
 201   2              SendString("M\r\n");
 202   2            Wait_ms(500);
 203   2          }
 204   1          return ;
 205   1      
 206   1      }
*** WARNING C280 IN LINE 41 OF Calibration.c: 'address_to_write': unreferenced local variable
 207          
 208          
 209          unsigned int Max_Value(unsigned int *input)
 210          {
 211   1        unsigned int max=0,max_location=40,i;
 212   1        //int i;
 213   1        for(i=0;i<81;i++) //total 81 diff values
 214   1        {
 215   2          max=max>*(input+i)? max:*(input+i);
 216   2          if (max==*(input+i)&& max!=0)
 217   2            max_location=i;
 218   2        }
 219   1        return max_location;// pos in the array
 220   1        
 221   1      }
 222          //input currnt_pos is the JP max theorical position
 223          float calibration(    unsigned char mnths,unsigned char dys,
 224                                unsigned char hurs,unsigned char mns,unsigned char sconds,
 225                                float  *currnt_pos,unsigned int *calib_max_ADC_Val,float *theorical_max_pos,
 226                                unsigned int *max_ADC_JP_value,unsigned long int *NOR_address_to_write)
 227          {
 228   1        float calib_value=0;
 229   1        unsigned int temporary_calib_max_ADC=0,temp_max_ADC_JP_value=0;//
 230   1        unsigned long int temp_NOR_address_to_write=*NOR_address_to_write;
 231   1        float JP_max_pos=*currnt_pos;
 232   1        *calib_max_ADC_Val=0;
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/30/2019 16:32:02 PAGE 5   

 233   1        *max_ADC_JP_value=0;
 234   1        *theorical_max_pos=0;
 235   1        pwm_time_min=0;
 236   1        pwm_time_max=0;
 237   1        // if voltage is stable 
 238   1        if(voltage_is_stable())
 239   1        {
 240   2          //  move to JP theorical max position-20
 241   2          Update_position(mnths,dys,hurs,mns,sconds,&JP_max_pos,-20);// off set is Zero means we go to  (first, go
             - to JP max theorical position -20)
 242   2          *theorical_max_pos=JP_max_pos+20;// compensate +20 because of previous line.
 243   2          //  find the real max value in the area of JP +/- 15mm
 244   2          Find_Real_Max(&JP_max_pos,&temporary_calib_max_ADC,&temp_max_ADC_JP_value,&temp_NOR_address_to_write); /
             -/find real max and move to real max position
 245   2          
 246   2          *NOR_address_to_write=temp_NOR_address_to_write;
 247   2          
 248   2          *calib_max_ADC_Val=temporary_calib_max_ADC;
 249   2          *max_ADC_JP_value=temp_max_ADC_JP_value;
 250   2          calib_value=JP_max_pos-*theorical_max_pos;
 251   2          *currnt_pos=JP_max_pos;
 252   2          return calib_value;
 253   2        }
 254   1        else
 255   1          return 0;
 256   1      }
 257          int FindClosestSamedayCalibTime(int *input_calibration_bool_array,int current_time_stamp_position)
 258          {
 259   1        int i;
 260   1        for(i=current_time_stamp_position;i>=0;i--)
 261   1        {
 262   2          if(*(input_calibration_bool_array+i)==1)// find the closest calibrated time stamp
 263   2            return i;// return the position in the array
 264   2          else 
 265   2            return 0;
 266   2        }
 267   1      }
*** WARNING C291 IN LINE 267 OF Calibration.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2017    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----     257
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
