C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BIPOLARMOTOR
OBJECT MODULE PLACED IN .\Obj\BipolarMotor.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE BipolarMotor.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTEND
                    - PRINT(.\Lis\BipolarMotor.lst) TABS(2) OBJECT(.\Obj\BipolarMotor.obj)

line level    source

   1          #include "stc15f2k60s2.h"
   2          #include "LCD_Driver_SPLC780D.h"
   3          #include "Receiver_Position_Data.h"
   4          #include "math.h"
   5          #include "SunPos.h"
   6          #include "KeyPad.h"
   7          //#include "PCF85963BTL.h"
   8          //#include "PCF85063BTL.h"
   9          
  10          void Delay_ms(unsigned int ms);
  11          int Day_Of_Year(unsigned char months,unsigned char days);
  12          unsigned char BCDtoDec1(char bcd);
  13          void Display_Pos(float sign_dat);
  14          void WriteData(unsigned char dat);
  15          void Command(unsigned char dat);
  16          
  17          int lcd=0;
  18          float  degree;
  19          unsigned char previous_move_time=0;
  20          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
  21                      float  a21, float  a22, float  a23, float  a24,
  22                      float  a31, float  a32, float  a33, float  a34,
  23                      float  a41, float  a42, float  a43, float  a44 );
  24           float  findDet3x3( 
  25                      float  a11, float  a12, float  a13, 
  26                      float  a21, float  a22, float  a23,
  27                      float  a31, float  a32, float  a33 );           
  28          float
  29          cubic_interpolate (float *p1, float *p2, float *p3, float *p4, float x);
  30          
  31          unsigned char BCDtoDec1(unsigned char bcd)
  32          {
  33   1        unsigned char hi,lo;
  34   1        hi=bcd>>4;
  35   1        lo=bcd&0x0F;
  36   1        return hi*10+lo;
  37   1      }
  38          
  39          
  40          
  41          
  42          
  43          void Step_move(unsigned int step, bit dir)
  44          {
  45   1            unsigned int i=0;
  46   1            if(dir)
  47   1              P4 |=(1<<2);// set bit P4.2
  48   1            else
  49   1              P4 &=~(1<<2);// clear bit P4.2
  50   1            
  51   1            //for( i=0;i<step;i++)
  52   1            {
  53   2                P4 |=1<<1;// P41=1 // moving distance (mm)=pi^2*step*4/675
  54   2                Wait_ms(2);
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 2   

  55   2                P4 &= ~(1<<1);
  56   2                Wait_ms(2);
  57   2            }
  58   1      }
*** WARNING C280 IN LINE 43 OF BipolarMotor.c: 'step': unreferenced local variable
  59          
  60          
  61          // P4.5 direction; P4.3 pulse
  62          void Step_move_2ndMotor(unsigned int step, bit dir)
  63          {
  64   1            unsigned int i=0;
  65   1            if(dir)
  66   1              P4 |=(1<<5);// set bit P4.5
  67   1            else
  68   1              P4 &=~(1<<5);// clear bit P4.5
  69   1            
  70   1            //for( i=0;i<step;i++)
  71   1            {
  72   2                P3 |=1<<4;// P34=1 // moving distance (mm)=pi^2*step*4/675
  73   2                Wait_ms(2);
  74   2                P3 &= ~(1<<4);
  75   2                Wait_ms(2);
  76   2            }
  77   1      }
*** WARNING C280 IN LINE 62 OF BipolarMotor.c: 'step': unreferenced local variable
  78          
  79          void Move_2ndMotor(float  angle_distance, bit direction,float current_angle)
  80          {
  81   1          unsigned int step,i;
  82   1          step= (unsigned int)(angle_distance/0.039);// use geared motor 
  83   1          //  https://www.omc-stepperonline.com/geared-stepper-motor/nema-23-stepper-motor-bipolar-l76mm-w-gear-rai
             -o-471-planetary-gearbox-23hs30-2804s-pg47.html
  84   1          // we have another gear on the shaft with ratio 1:1
  85   1          for( i=0;i<step;i++)
  86   1          {
  87   2            Step_move_2ndMotor(step,direction);
  88   2            if(direction)
  89   2              current_angle=current_angle+0.039;// for LCD display only
  90   2            else
  91   2              current_angle=current_angle-0.039;// for LCD display only
  92   2            if(i%50==0)
  93   2            {
  94   3              Command(0x08);
  95   3              Command(0x09);
  96   3              selected_motor=1;
  97   3              Display_Pos(current_angle);
  98   3            }
  99   2          }
 100   1      }
 101          
 102          void Move(float  distance, bit direction,float current_position)
 103          {
 104   1          unsigned long int step,i;
 105   1          //int i;
 106   1          step= (unsigned long int)(distance*17.7);// num of steps=distance*180/(2*pi*R*0.039); step angle = 0.039
             -, R=83/2mm
 107   1          for( i=0;i<step;i++)
 108   1          {
 109   2            Step_move(step,direction);// move one step
 110   2            if(direction)
 111   2              current_position=current_position+0.0565;//2*angle*R=2*0.039/180*pi*83mm
 112   2            else
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 3   

 113   2              current_position=current_position-0.0565;
 114   2            if(i%50==0)
 115   2            {     
 116   3              Command(0x08);
 117   3              Command(0x09);
 118   3              selected_motor=0;
 119   3              Display_Pos(current_position);
 120   3            }
 121   2          }
 122   1      }
 123          //=====================================================
 124          //We need 4 points for cubic interpolation, p1[x],p1[y],..,p4[x],p4[y]
 125           float  findDet3x3( 
 126                      float  a11, float  a12, float  a13, 
 127                      float  a21, float  a22, float  a23,
 128                      float  a31, float  a32, float  a33 )
 129          {
 130   1          return( a11*a22*a33 + a12*a23*a31 + a13*a21*a32 -
 131   1                  a13*a22*a31 - a12*a21*a33 - a11*a23*a32 );
 132   1      }
 133          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
 134                      float  a21, float  a22, float  a23, float  a24,
 135                      float  a31, float  a32, float  a33, float  a34,
 136                      float  a41, float  a42, float  a43, float  a44 )
 137          {
 138   1        
 139   1          //return a11*(float)findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44);
 140   1          //return (float)findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44);
 141   1          //return (float)findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44);
 142   1          //return (float)findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43);
 143   1        //  return a21;
 144   1          return( a11*findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44) -
 145   1                  a12*findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44) +
 146   1                  a13*findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44) -
 147   1                  a14*findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43));
 148   1      }
 149              
 150          //===================================================== 
 151          
 152           
 153          //===================================================== 
 154          float  linear_interpolate(struct point p1,struct point p2, float  x)
 155          {
 156   1        float  fx;
 157   1        
 158   1        fx=-(p1.x-x)/(p1.x-p2.x)*(p1.y-p2.y)+p1.y;
 159   1        
 160   1        return fx;
 161   1      }
 162          
 163          
 164          
 165          void Update_position(unsigned char mnths,unsigned char dys,
 166                               unsigned char hurs,unsigned char mns,unsigned char sconds,
 167                               float  *currnt_pos, float offset_calib,float  *currnt_angle)
 168          {
 169   1        unsigned int date,i=0,yy=0;
 170   1        
 171   1        float  desired_distance=0,distance=0,angle_distance=0,JP_pos=0,angle,JP_angle=0;
 172   1        float  pos_interpolate_azimuth[num_of_azimuth_stamp],angle_interpolate_azimuth[num_of_azimuth_stamp],curr
             -ent_local_sun_time,azimuth, elevation,time_offset,UTC_time=-5;
 173   1        float declination;
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 4   

 174   1        struct point p1,p2;
 175   1        struct cTime time;
 176   1        struct cLocation location;
 177   1        struct cSunCoordinates *sunCoord;
 178   1        //hurs=hurs-1;// change to sun time
 179   1        //dys=dys+4;
 180   1      
 181   1        location.dLongitude=-73.6495;
 182   1        location.dLatitude=45.478889;
 183   1        time.iYear=2018;
 184   1        time.iMonth=BCDtoDec1(mnths);
 185   1        time.iDay=BCDtoDec1(dys);
 186   1        time.dHours=BCDtoDec1(hurs);
 187   1        time.dMinutes=BCDtoDec1(mns);
 188   1        time.dSeconds=BCDtoDec1(sconds&0x7f);
 189   1      
 190   1        
 191   1        desired_distance=*currnt_pos;
 192   1        //desired_angle=*currnt_angle;
 193   1        //date=Day_Of_Year(mnths,dys)+4;
 194   1        //date=237;
 195   1        declination=sunpos(time,location,&sunCoord)*180/pi;//+declination_offset;
*** WARNING C182 IN LINE 195 OF BipolarMotor.c: pointer to different objects
 196   1        time_offset=1/60*(4*(location.dLongitude-15*UTC_time)+9.87*sin(2*(360*(time.iDay-81)/365)*pi/180)    -   
             - 7.53*cos((360*(time.iDay-81)/365)*pi/180)    -   1.5*sin((360*(time.iDay-81)/365)*pi/180));
 197   1        current_local_sun_time=(float) (BCDtoDec1(hurs))+(float)BCDtoDec1(mns)/60+time_offset-1;//current time=su
             -n time= clock time -1
 198   1        //=B10-1/60*(4*($B$7-15*$B$4)+9.87*SIN(2*(360*($B$8-81)/365)*3.1416/180)    -    7.53*COS((360*($B$8-81)/
             -365)*3.1416/180)    -   1.5*SIN((360*($B$8-81)/365)*3.1416/180))
 199   1        elevation=(180/pi)*asin(             sin(location.dLatitude*pi/180)*sin(declination*pi/180)+
 200   1                  cos(location.dLatitude*pi/180)*cos(declination*pi/180)*cos((15*(current_local_sun_time-12))*pi/180) 
             -          );
 201   1        azimuth=180+(180/pi)*asin(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin
             -((90-elevation)*pi/180)          );// JP calculation
 202   1        //azimuth=(180/pi)*acos(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin((
             -90-elevation)*pi/180)          );// JP calculation
 203   1      
 204   1        
 205   1        if(BCDtoDec1(sconds&0x7f)%2==0)
 206   1        {
 207   2          // interpolate for azimuth
 208   2          for (i=0;i<num_of_azimuth_stamp;i++)
 209   2          {
 210   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 211   3            {
 212   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 213   4              {
 214   5                p1.x=date_azimuth_mapping[i];
 215   5                p2.x=date_azimuth_mapping[i+1];
 216   5                
 217   5                p1.y=RX_pos[yy][i];
 218   5                p2.y=RX_pos[yy][i+1];
 219   5                
 220   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 221   5              }
 222   4              //break;
 223   4            }
 224   3            else if ((azimuth<=date_azimuth_mapping_symmetry_side[i]) && (azimuth>=date_azimuth_mapping_symmetry_si
             -de[i+1]))
 225   3            {
 226   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 227   4              {
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 5   

 228   5                p1.x=date_azimuth_mapping_symmetry_side[i];
 229   5                p2.x=date_azimuth_mapping_symmetry_side[i+1];
 230   5                
 231   5                p1.y=RX_pos[yy][i];
 232   5                p2.y=RX_pos[yy][i+1];
 233   5                
 234   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 235   5              }
 236   4              //break;
 237   4            }
 238   3            
 239   3          }
 240   2      
 241   2          // interpolate for elevation
 242   2          for(i=0;i<num_of_elevation_stamp;i++)
 243   2          {
 244   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 245   3            {
 246   4              p1.x=elevation_stamp[i];
 247   4              p2.x=elevation_stamp[i+1];
 248   4              
 249   4              p1.y=pos_interpolate_azimuth[i];
 250   4              p2.y=pos_interpolate_azimuth[i+1];
 251   4              
 252   4              JP_pos=linear_interpolate(p1,p2,elevation);
 253   4              //break;
 254   4              
 255   4            }
 256   3            
 257   3          }
 258   2          
 259   2          desired_distance=JP_pos;// +offset_calib;
 260   2          //desired_distance=elevation;// +offset_calib;
 261   2          //desired_distance=azimuth;// +offset_calib;
 262   2          //desired_distance=declination;// +offset_calib;
 263   2      
 264   2          distance=desired_distance-*currnt_pos;
 265   2          if(abs(distance)>0.5 | abs(previous_move_time-BCDtoDec1(sconds&0x7f))>30)// move if the change is more t
             -han 0.5mm OR >30s
 266   2          {
 267   3            if(distance>0)
 268   3              Move(distance,1,*currnt_pos);
 269   3            else if (distance<0)
 270   3              Move(-distance,0,*currnt_pos);
 271   3            previous_move_time=BCDtoDec1(sconds&0x7f);
 272   3            *currnt_pos=desired_distance;
 273   3          }
 274   2          
 275   2          //============================================================
 276   2          // MOVEMENT CONTROL FOR ANGLE ROTATION
 277   2          // Interpolate for azimuth
 278   2          //============================================================
 279   2          
 280   2          for (i=0;i<num_of_azimuth_stamp;i++)
 281   2          {
 282   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 283   3            {
 284   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 285   4              {
 286   5                p1.x=date_azimuth_mapping[i];
 287   5                p2.x=date_azimuth_mapping[i+1];
 288   5                
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 6   

 289   5                p1.y=RX_angle[yy][i];
 290   5                p2.y=RX_angle[yy][i+1];
 291   5                
 292   5                angle_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 293   5              }
 294   4              //break;
 295   4            }
 296   3            else if ((azimuth<=date_azimuth_mapping_symmetry_side[i]) && (azimuth>=date_azimuth_mapping_symmetry_si
             -de[i+1]))
 297   3            {
 298   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 299   4              {
 300   5                p1.x=date_azimuth_mapping_symmetry_side[i];
 301   5                p2.x=date_azimuth_mapping_symmetry_side[i+1];
 302   5                
 303   5                p1.y=RX_angle[yy][i];
 304   5                p2.y=RX_angle[yy][i+1];
 305   5                
 306   5                angle_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 307   5              }
 308   4              //break;
 309   4            }
 310   3            
 311   3          }
 312   2          // MOVEMENT CONTROL FOR ANGLE ROTATION
 313   2          // interpolate for elevation
 314   2          for(i=0;i<num_of_elevation_stamp;i++)
 315   2          {
 316   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 317   3            {
 318   4              p1.x=elevation_stamp[i];
 319   4              p2.x=elevation_stamp[i+1];
 320   4              
 321   4              p1.y=angle_interpolate_azimuth[i];
 322   4              p2.y=angle_interpolate_azimuth[i+1];
 323   4              
 324   4              JP_angle=linear_interpolate(p1,p2,elevation);
 325   4              //break;
 326   4              
 327   4            }
 328   3            
 329   3          }
 330   2              
 331   2          angle_distance=JP_angle-*currnt_angle;
 332   2          if(abs(angle_distance)>0.5 | abs(previous_move_time-BCDtoDec1(sconds&0x7f))>30)// move if the change is 
             -more than 0.5mm OR >30s
 333   2          {
 334   3            if(angle_distance>0)
 335   3              Move_2ndMotor(angle_distance,1,*currnt_angle);
 336   3            else if (angle_distance<0)
 337   3              Move_2ndMotor(-angle_distance,0,*currnt_angle);
 338   3            previous_move_time=BCDtoDec1(sconds&0x7f);
 339   3            *currnt_angle=JP_angle;
 340   3          }
 341   2          
 342   2        }
 343   1        return;
 344   1      
 345   1      }
*** WARNING C280 IN LINE 167 OF BipolarMotor.c: 'offset_calib': unreferenced local variable
*** WARNING C280 IN LINE 169 OF BipolarMotor.c: 'date': unreferenced local variable
*** WARNING C280 IN LINE 171 OF BipolarMotor.c: 'angle': unreferenced local variable
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 7   

 346          
 347          void Display_Pos(float sign_dat)
 348          {
 349   1        unsigned char unit, ten, hundred,thousand;
 350   1        unsigned char after_dot;
 351   1        int dat;
 352   1        dat=abs(sign_dat);
 353   1        if (sign_dat>0)
 354   1          after_dot=(unsigned char)((sign_dat-dat)*10);
 355   1        else
 356   1          after_dot=(unsigned char)((-sign_dat-dat)*10);
 357   1        
 358   1        unit =dat%10;// remainder after division
 359   1        thousand=dat/1000;
 360   1        hundred=(dat-thousand*1000)/100;
 361   1        ten=(dat-thousand*1000-hundred*100)/10;
 362   1        if (sign_dat>=0)
 363   1        {
 364   2          WriteData(thousand|0x30);
 365   2          WriteData(hundred|0x30);
 366   2          WriteData(ten|0x30);
 367   2          WriteData(unit|0x30);
 368   2          WriteData(0x2E);//.
 369   2          WriteData((after_dot)|0x30);
 370   2          if(!selected_motor)
 371   2          {
 372   3            WriteData(0x6D);//m
 373   3            WriteData(0x6D);//m
 374   3            WriteData(0x20);// "blank"
 375   3            //WriteData(0x20);// "blank"
 376   3            //WriteData(0x20);// "blank"
 377   3          }
 378   2          else
 379   2          {
 380   3            WriteData(0xDF);// "blank"
 381   3            WriteData(0x20);// "blank"
 382   3            WriteData(0x20);// "blank"
 383   3          }
 384   2        }
 385   1        else
 386   1        {
 387   2          
 388   2          WriteData(0x2D);// "-"
 389   2          WriteData(thousand|0x30);
 390   2          WriteData(hundred|0x30);
 391   2          WriteData(ten|0x30);
 392   2          WriteData(unit|0x30);
 393   2          WriteData(0x2E);//"."
 394   2          WriteData(after_dot|0x30);
 395   2          if(!selected_motor)
 396   2          {
 397   3            WriteData(0x6D);//m
 398   3            WriteData(0x6D);//m
 399   3            WriteData(0x20);// "blank"
 400   3            //WriteData(0x20);// "blank"
 401   3            //WriteData(0x20);// "blank"
 402   3          }
 403   2          else
 404   2          {
 405   3            WriteData(0xDF);// "blank"
 406   3            WriteData(0x20);// "blank"
 407   3            WriteData(0x20);// "blank"
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      03/25/2019 10:53:02 PAGE 8   

 408   3          }
 409   2          //WriteData(0x6D);//m
 410   2          //WriteData(0x6D);//m
 411   2      
 412   2        }
 413   1        return;
 414   1      }
 415          
 416          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6057    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    971     361
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
