C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BIPOLARMOTOR
OBJECT MODULE PLACED IN .\Obj\BipolarMotor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE BipolarMotor.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXT
                    -END PRINT(.\Lis\BipolarMotor.lst) TABS(2) OBJECT(.\Obj\BipolarMotor.obj)

line level    source

   1          #include "stc15f2k60s2.h"
   2          #include "LCD_Driver_SPLC780D.h"
   3          #include "Receiver_Position_Data.h"
   4          #include "math.h"
   5          #include "SunPos.h"
   6          #include "KeyPad.h"
   7          //#include "PCF85963BTL.h"
   8          //#include "PCF85063BTL.h"
   9          
  10          void Delay_ms(unsigned int ms);
  11          int Day_Of_Year(unsigned char months,unsigned char days);
  12          unsigned char BCDtoDec1(char bcd);
  13          void Display_Pos(float sign_dat);
  14          void WriteData(unsigned char dat);
  15          void Command(unsigned char dat);
  16          
  17          int lcd=0;
  18          float  degree;
  19          unsigned char previous_move_time=0;
  20          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
  21                      float  a21, float  a22, float  a23, float  a24,
  22                      float  a31, float  a32, float  a33, float  a34,
  23                      float  a41, float  a42, float  a43, float  a44 );
  24           float  findDet3x3( 
  25                      float  a11, float  a12, float  a13, 
  26                      float  a21, float  a22, float  a23,
  27                      float  a31, float  a32, float  a33 );           
  28          float
  29          cubic_interpolate (float *p1, float *p2, float *p3, float *p4, float x);
  30          
  31          unsigned char BCDtoDec1(unsigned char bcd)
  32          {
  33   1        unsigned char hi,lo;
  34   1        hi=bcd>>4;
  35   1        lo=bcd&0x0F;
  36   1        return hi*10+lo;
  37   1      }
  38          
  39          
  40          
  41          
  42          
  43          void Step_move(unsigned int step, bit dir)
  44          {
  45   1            unsigned int i=0;
  46   1            if(dir)
  47   1              P4 |=(1<<2);// set bit P4.2
  48   1            else
  49   1              P4 &=~(1<<2);// clear bit P4.2
  50   1            
  51   1            //for( i=0;i<step;i++)
  52   1            {
  53   2                P4 |=1<<1;// P41=1 // moving distance (mm)=pi^2*step*4/675
  54   2                Wait_ms(2);
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 2   

  55   2                P4 &= ~(1<<1);
  56   2                Wait_ms(2);
  57   2            }
  58   1      }
*** WARNING C280 IN LINE 43 OF BipolarMotor.c: 'step': unreferenced local variable
  59          
  60          
  61          // P4.5 direction; P4.3 pulse
  62          void Step_move_2ndMotor(unsigned int step, bit dir)
  63          {
  64   1            unsigned int i=0;
  65   1            if(dir)
  66   1              P4 |=(1<<5);// set bit P4.5
  67   1            else
  68   1              P4 &=~(1<<5);// clear bit P4.5
  69   1            
  70   1            //for( i=0;i<step;i++)
  71   1            {
  72   2                P3 |=1<<4;// P43=1 // moving distance (mm)=pi^2*step*4/675
  73   2                Wait_ms(2);
  74   2                P3 &= ~(1<<4);
  75   2                Wait_ms(2);
  76   2            }
  77   1      }
*** WARNING C280 IN LINE 62 OF BipolarMotor.c: 'step': unreferenced local variable
  78          
  79          void Move_2ndMotor(float  angle_distance, bit direction,float current_angle)
  80          {
  81   1          unsigned int step,i;
  82   1          step= (unsigned int)(angle_distance/0.039);// use geared motor 
  83   1          //https://www.omc-stepperonline.com/geared-stepper-motor/nema-23-stepper-motor-bipolar-l76mm-w-gear-raio
             --471-planetary-gearbox-23hs30-2804s-pg47.html
  84   1          for( i=0;i<step;i++)
  85   1          {
  86   2            Step_move_2ndMotor(step,direction);
  87   2            if(direction)
  88   2              current_angle=current_angle+0.039;// for LCD display only
  89   2            else
  90   2              current_angle=current_angle-0.039;// for LCD display only
  91   2            if(i%50==0)
  92   2            {
  93   3              Command(0x08);
  94   3              Command(0x09);
  95   3              selected_motor=1;
  96   3              Display_Pos(current_angle);
  97   3            }
  98   2          }
  99   1      }
 100          
 101          void Move(float  distance, bit direction,float current_position)
 102          {
 103   1          unsigned long int step,i;
 104   1          //int i;
 105   1          step= (unsigned long int)(distance*337.5/(3.14159));// need to update this for the system in Vancouver
 106   1          for( i=0;i<step;i++)
 107   1          {
 108   2            Step_move(step,direction);
 109   2            if(direction)
 110   2              current_position=current_position+0.00931;
 111   2            else
 112   2              current_position=current_position-0.00931;
 113   2            if(i%50==0)
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 3   

 114   2            {     
 115   3              Command(0x08);
 116   3              Command(0x09);
 117   3              selected_motor=0;
 118   3              Display_Pos(current_position);
 119   3            }
 120   2          }
 121   1      }
 122          //=====================================================
 123          //We need 4 points for cubic interpolation, p1[x],p1[y],..,p4[x],p4[y]
 124           float  findDet3x3( 
 125                      float  a11, float  a12, float  a13, 
 126                      float  a21, float  a22, float  a23,
 127                      float  a31, float  a32, float  a33 )
 128          {
 129   1          return( a11*a22*a33 + a12*a23*a31 + a13*a21*a32 -
 130   1                  a13*a22*a31 - a12*a21*a33 - a11*a23*a32 );
 131   1      }
 132          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
 133                      float  a21, float  a22, float  a23, float  a24,
 134                      float  a31, float  a32, float  a33, float  a34,
 135                      float  a41, float  a42, float  a43, float  a44 )
 136          {
 137   1        
 138   1          //return a11*(float)findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44);
 139   1          //return (float)findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44);
 140   1          //return (float)findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44);
 141   1          //return (float)findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43);
 142   1        //  return a21;
 143   1          return( a11*findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44) -
 144   1                  a12*findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44) +
 145   1                  a13*findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44) -
 146   1                  a14*findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43));
 147   1      }
 148              
 149          //===================================================== 
 150          
 151           
 152          //===================================================== 
 153          float  linear_interpolate(struct point p1,struct point p2, float  x)
 154          {
 155   1        float  fx;
 156   1        
 157   1        fx=-(p1.x-x)/(p1.x-p2.x)*(p1.y-p2.y)+p1.y;
 158   1        
 159   1        return fx;
 160   1      }
 161          
 162          
 163          
 164          void Update_position(unsigned char mnths,unsigned char dys,
 165                               unsigned char hurs,unsigned char mns,unsigned char sconds,
 166                               float  *currnt_pos, float offset_calib,float  *currnt_angle)
 167          {
 168   1        unsigned int date,i=0,yy=0;
 169   1        
 170   1        float  desired_distance=0,distance=0,angle_distance=0,JP_pos=0,angle,JP_angle=0;
 171   1        float  pos_interpolate_azimuth[num_of_azimuth_stamp],angle_interpolate_azimuth[num_of_azimuth_stamp],curr
             -ent_local_sun_time,azimuth, elevation,time_offset,UTC_time=-5;
 172   1        float declination;
 173   1        struct point p1,p2;
 174   1        struct cTime time;
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 4   

 175   1        struct cLocation location;
 176   1        struct cSunCoordinates *sunCoord;
 177   1        //hurs=hurs-1;// change to sun time
 178   1        //dys=dys+4;
 179   1        location.dLongitude=-73.6495;
 180   1        location.dLatitude=45.478889;
 181   1        time.iYear=2018;
 182   1        time.iMonth=BCDtoDec1(mnths);
 183   1        time.iDay=BCDtoDec1(dys);
 184   1        time.dHours=BCDtoDec1(hurs);
 185   1        time.dMinutes=BCDtoDec1(mns);
 186   1        time.dSeconds=BCDtoDec1(sconds&0x7f);
 187   1      
 188   1        
 189   1        desired_distance=*currnt_pos;
 190   1        //desired_angle=*currnt_angle;
 191   1        //date=Day_Of_Year(mnths,dys)+4;
 192   1        //date=237;
 193   1        declination=sunpos(time,location,&sunCoord)*180/pi;//+declination_offset;
*** WARNING C182 IN LINE 193 OF BipolarMotor.c: pointer to different objects
 194   1        time_offset=1/60*(4*(location.dLongitude-15*UTC_time)+9.87*sin(2*(360*(time.iDay-81)/365)*pi/180)    -   
             - 7.53*cos((360*(time.iDay-81)/365)*pi/180)    -   1.5*sin((360*(time.iDay-81)/365)*pi/180));
 195   1        current_local_sun_time=(float) (BCDtoDec1(hurs))+(float)BCDtoDec1(mns)/60+time_offset-1;//current time=su
             -n time= clock time -1
 196   1        //=B10-1/60*(4*($B$7-15*$B$4)+9.87*SIN(2*(360*($B$8-81)/365)*3.1416/180)    -    7.53*COS((360*($B$8-81)/
             -365)*3.1416/180)    -   1.5*SIN((360*($B$8-81)/365)*3.1416/180))
 197   1        elevation=(180/pi)*asin(             sin(location.dLatitude*pi/180)*sin(declination*pi/180)+
 198   1                  cos(location.dLatitude*pi/180)*cos(declination*pi/180)*cos((15*(current_local_sun_time-12))*pi/180) 
             -          );
 199   1        azimuth=180+(180/pi)*asin(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin
             -((90-elevation)*pi/180)          );// JP calculation
 200   1        //azimuth=(180/pi)*acos(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin((
             -90-elevation)*pi/180)          );// JP calculation
 201   1      
 202   1        
 203   1        if(BCDtoDec1(sconds&0x7f)%2==0)
 204   1        {
 205   2          // interpolate for azimuth
 206   2          for (i=0;i<num_of_azimuth_stamp;i++)
 207   2          {
 208   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 209   3            {
 210   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 211   4              {
 212   5                p1.x=date_azimuth_mapping[i];
 213   5                p2.x=date_azimuth_mapping[i+1];
 214   5                
 215   5                p1.y=RX_pos[yy][i];
 216   5                p2.y=RX_pos[yy][i+1];
 217   5                
 218   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 219   5              }
 220   4              //break;
 221   4            }
 222   3            else if ((azimuth<=date_azimuth_mapping_symmetry_side[i]) && (azimuth>=date_azimuth_mapping_symmetry_si
             -de[i+1]))
 223   3            {
 224   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 225   4              {
 226   5                p1.x=date_azimuth_mapping_symmetry_side[i];
 227   5                p2.x=date_azimuth_mapping_symmetry_side[i+1];
 228   5                
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 5   

 229   5                p1.y=RX_pos[yy][i];
 230   5                p2.y=RX_pos[yy][i+1];
 231   5                
 232   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 233   5              }
 234   4              //break;
 235   4            }
 236   3            
 237   3          }
 238   2      
 239   2          // interpolate for elevation
 240   2          for(i=0;i<num_of_elevation_stamp;i++)
 241   2          {
 242   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 243   3            {
 244   4              p1.x=elevation_stamp[i];
 245   4              p2.x=elevation_stamp[i+1];
 246   4              
 247   4              p1.y=pos_interpolate_azimuth[i];
 248   4              p2.y=pos_interpolate_azimuth[i+1];
 249   4              
 250   4              JP_pos=linear_interpolate(p1,p2,elevation);
 251   4              //break;
 252   4              
 253   4            }
 254   3            
 255   3          }
 256   2          
 257   2          desired_distance=JP_pos;// +offset_calib;
 258   2          //desired_distance=elevation;// +offset_calib;
 259   2          //desired_distance=azimuth;// +offset_calib;
 260   2          //desired_distance=declination;// +offset_calib;
 261   2      
 262   2          distance=desired_distance-*currnt_pos;
 263   2          if(abs(distance)>0.5 | abs(previous_move_time-BCDtoDec1(sconds&0x7f))>30)// move if the change is more t
             -han 0.5mm OR >30s
 264   2          {
 265   3            if(distance>0)
 266   3              Move(distance,1,*currnt_pos);
 267   3            else if (distance<0)
 268   3              Move(-distance,0,*currnt_pos);
 269   3            previous_move_time=BCDtoDec1(sconds&0x7f);
 270   3            *currnt_pos=desired_distance;
 271   3          }
 272   2          
 273   2          //============================================================
 274   2          // MOVEMENT CONTROL FOR ANGLE ROTATION
 275   2          // Interpolate for azimuth
 276   2          //============================================================
 277   2          
 278   2          for (i=0;i<num_of_azimuth_stamp;i++)
 279   2          {
 280   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 281   3            {
 282   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 283   4              {
 284   5                p1.x=date_azimuth_mapping[i];
 285   5                p2.x=date_azimuth_mapping[i+1];
 286   5                
 287   5                p1.y=RX_angle[yy][i];
 288   5                p2.y=RX_angle[yy][i+1];
 289   5                
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 6   

 290   5                angle_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 291   5              }
 292   4              //break;
 293   4            }
 294   3            else if ((azimuth<=date_azimuth_mapping_symmetry_side[i]) && (azimuth>=date_azimuth_mapping_symmetry_si
             -de[i+1]))
 295   3            {
 296   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 297   4              {
 298   5                p1.x=date_azimuth_mapping_symmetry_side[i];
 299   5                p2.x=date_azimuth_mapping_symmetry_side[i+1];
 300   5                
 301   5                p1.y=RX_angle[yy][i];
 302   5                p2.y=RX_angle[yy][i+1];
 303   5                
 304   5                angle_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 305   5              }
 306   4              //break;
 307   4            }
 308   3            
 309   3          }
 310   2          // MOVEMENT CONTROL FOR ANGLE ROTATION
 311   2          // interpolate for elevation
 312   2          for(i=0;i<num_of_elevation_stamp;i++)
 313   2          {
 314   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 315   3            {
 316   4              p1.x=elevation_stamp[i];
 317   4              p2.x=elevation_stamp[i+1];
 318   4              
 319   4              p1.y=angle_interpolate_azimuth[i];
 320   4              p2.y=angle_interpolate_azimuth[i+1];
 321   4              
 322   4              JP_angle=linear_interpolate(p1,p2,elevation);
 323   4              //break;
 324   4              
 325   4            }
 326   3            
 327   3          }
 328   2              
 329   2          angle_distance=JP_angle-*currnt_angle;
 330   2          if(abs(angle_distance)>0.5 | abs(previous_move_time-BCDtoDec1(sconds&0x7f))>30)// move if the change is 
             -more than 0.5mm OR >30s
 331   2          {
 332   3            if(angle_distance>0)
 333   3              Move_2ndMotor(angle_distance,1,*currnt_angle);
 334   3            else if (angle_distance<0)
 335   3              Move_2ndMotor(-angle_distance,0,*currnt_angle);
 336   3            previous_move_time=BCDtoDec1(sconds&0x7f);
 337   3            *currnt_angle=JP_angle;
 338   3          }
 339   2          
 340   2        }
 341   1        return;
 342   1      
 343   1      }
*** WARNING C280 IN LINE 166 OF BipolarMotor.c: 'offset_calib': unreferenced local variable
*** WARNING C280 IN LINE 168 OF BipolarMotor.c: 'date': unreferenced local variable
*** WARNING C280 IN LINE 170 OF BipolarMotor.c: 'angle': unreferenced local variable
 344          
 345          void Display_Pos(float sign_dat)
 346          {
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 7   

 347   1        unsigned char unit, ten, hundred,thousand;
 348   1        unsigned char after_dot;
 349   1        int dat;
 350   1        dat=abs(sign_dat);
 351   1        if (sign_dat>0)
 352   1          after_dot=(unsigned char)((sign_dat-dat)*10);
 353   1        else
 354   1          after_dot=(unsigned char)((-sign_dat-dat)*10);
 355   1        
 356   1        unit =dat%10;// remainder after division
 357   1        thousand=dat/1000;
 358   1        hundred=(dat-thousand*1000)/100;
 359   1        ten=(dat-thousand*1000-hundred*100)/10;
 360   1        if (sign_dat>=0)
 361   1        {
 362   2          WriteData(thousand|0x30);
 363   2          WriteData(hundred|0x30);
 364   2          WriteData(ten|0x30);
 365   2          WriteData(unit|0x30);
 366   2          WriteData(0x2E);//.
 367   2          WriteData((after_dot)|0x30);
 368   2          if(!selected_motor)
 369   2          {
 370   3            WriteData(0x6D);//m
 371   3            WriteData(0x6D);//m
 372   3            WriteData(0x20);// "blank"
 373   3            //WriteData(0x20);// "blank"
 374   3            //WriteData(0x20);// "blank"
 375   3          }
 376   2          else
 377   2          {
 378   3            WriteData(0xDF);// "blank"
 379   3            WriteData(0x20);// "blank"
 380   3            WriteData(0x20);// "blank"
 381   3          }
 382   2        }
 383   1        else
 384   1        {
 385   2          
 386   2          WriteData(0x2D);// "-"
 387   2          WriteData(thousand|0x30);
 388   2          WriteData(hundred|0x30);
 389   2          WriteData(ten|0x30);
 390   2          WriteData(unit|0x30);
 391   2          WriteData(0x2E);//"."
 392   2          WriteData(after_dot|0x30);
 393   2          if(!selected_motor)
 394   2          {
 395   3            WriteData(0x6D);//m
 396   3            WriteData(0x6D);//m
 397   3            WriteData(0x20);// "blank"
 398   3            //WriteData(0x20);// "blank"
 399   3            //WriteData(0x20);// "blank"
 400   3          }
 401   2          else
 402   2          {
 403   3            WriteData(0xDF);// "blank"
 404   3            WriteData(0x20);// "blank"
 405   3            WriteData(0x20);// "blank"
 406   3          }
 407   2          //WriteData(0x6D);//m
 408   2          //WriteData(0x6D);//m
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 16:30:11 PAGE 8   

 409   2      
 410   2        }
 411   1        return;
 412   1      }
 413          
 414          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6068    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    971     361
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
