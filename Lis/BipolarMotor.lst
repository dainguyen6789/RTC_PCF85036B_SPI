C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BIPOLARMOTOR
OBJECT MODULE PLACED IN .\Obj\BipolarMotor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE BipolarMotor.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXT
                    -END PRINT(.\Lis\BipolarMotor.lst) TABS(2) OBJECT(.\Obj\BipolarMotor.obj)

line level    source

   1          #include "stc15f2k60s2.h"
   2          #include "LCD_Driver_SPLC780D.h"
   3          #include "Receiver_Position_Data.h"
   4          #include "math.h"
   5          #include "SunPos.h"
   6          #include "KeyPad.h"
   7          //#include "PCF85963BTL.h"
   8          //#include "PCF85063BTL.h"
   9          
  10          void Delay_ms(unsigned int ms);
  11          int Day_Of_Year(unsigned char months,unsigned char days);
  12          unsigned char BCDtoDec1(char bcd);
  13          void Display_Pos(float sign_dat);
  14          void WriteData(unsigned char dat);
  15          void Command(unsigned char dat);
  16          
  17          int lcd=0;
  18          float  degree;
  19          unsigned char previous_move_time=0;
  20          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
  21                      float  a21, float  a22, float  a23, float  a24,
  22                      float  a31, float  a32, float  a33, float  a34,
  23                      float  a41, float  a42, float  a43, float  a44 );
  24           float  findDet3x3( 
  25                      float  a11, float  a12, float  a13, 
  26                      float  a21, float  a22, float  a23,
  27                      float  a31, float  a32, float  a33 );           
  28          float
  29          cubic_interpolate (float *p1, float *p2, float *p3, float *p4, float x);
  30          
  31          unsigned char BCDtoDec1(unsigned char bcd)
  32          {
  33   1        unsigned char hi,lo;
  34   1        hi=bcd>>4;
  35   1        lo=bcd&0x0F;
  36   1        return hi*10+lo;
  37   1      }
  38          
  39          
  40          
  41          
  42          
  43          void Step_move(unsigned int step, bit dir)
  44          {
  45   1            unsigned int i=0;
  46   1            if(dir)
  47   1              P4 |=(1<<2);// set bit P4.2
  48   1            else
  49   1              P4 &=~(1<<2);// clear bit P4.2
  50   1            
  51   1            //for( i=0;i<step;i++)
  52   1            {
  53   2                P4 |=1<<1;// P41=1 // moving distance (mm)=pi^2*step*4/675
  54   2                Wait_ms(2);
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 2   

  55   2                P4 &= ~(1<<1);
  56   2                Wait_ms(2);
  57   2            }
  58   1      }
*** WARNING C280 IN LINE 43 OF BipolarMotor.c: 'step': unreferenced local variable
  59          
  60          
  61          // P4.5 direction; P4.3 pulse
  62          void Step_move_2ndMotor(unsigned int step, bit dir)
  63          {
  64   1            unsigned int i=0;
  65   1            if(dir)
  66   1              P4 |=(1<<5);// set bit P4.5
  67   1            else
  68   1              P4 &=~(1<<5);// clear bit P4.5
  69   1            
  70   1            //for( i=0;i<step;i++)
  71   1            {
  72   2                P3 |=1<<4;// P43=1 // moving distance (mm)=pi^2*step*4/675
  73   2                Wait_ms(2);
  74   2                P3 &= ~(1<<4);
  75   2                Wait_ms(2);
  76   2            }
  77   1      }
*** WARNING C280 IN LINE 62 OF BipolarMotor.c: 'step': unreferenced local variable
  78          
  79          void Move_2ndMotor(float  angle_distance, bit direction,float current_angle)
  80          {
  81   1          unsigned int step,i;
  82   1          step= (unsigned int)(angle_distance/0.039);// use geared motor 
  83   1          //https://www.omc-stepperonline.com/geared-stepper-motor/nema-23-stepper-motor-bipolar-l76mm-w-gear-raio
             --471-planetary-gearbox-23hs30-2804s-pg47.html
  84   1          for( i=0;i<step;i++)
  85   1          {
  86   2            Step_move_2ndMotor(step,direction);
  87   2            if(direction)
  88   2              current_angle=current_angle+0.039;// for LCD display only
  89   2            else
  90   2              current_angle=current_angle-0.039;// for LCD display only
  91   2            if(i%50==0)
  92   2            {
  93   3              Command(0x08);
  94   3              Command(0x09);
  95   3              Display_Pos(current_angle);
  96   3            }
  97   2          }
  98   1      }
  99          
 100          void Move(float  distance, bit direction,float current_position)
 101          {
 102   1          unsigned long int step,i;
 103   1          //int i;
 104   1          step= (unsigned long int)(distance*337.5/(3.14159));
 105   1          for( i=0;i<step;i++)
 106   1          {
 107   2            Step_move(step,direction);
 108   2            if(direction)
 109   2              current_position=current_position+0.00931;
 110   2            else
 111   2              current_position=current_position-0.00931;
 112   2            if(i%50==0)
 113   2            {     
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 3   

 114   3              Command(0x08);
 115   3              Command(0x09);
 116   3              Display_Pos(current_position);
 117   3              WriteData(0x6D);//m
 118   3            }
 119   2          }
 120   1      }
 121          //=====================================================
 122          //We need 4 points for cubic interpolation, p1[x],p1[y],..,p4[x],p4[y]
 123           float  findDet3x3( 
 124                      float  a11, float  a12, float  a13, 
 125                      float  a21, float  a22, float  a23,
 126                      float  a31, float  a32, float  a33 )
 127          {
 128   1          return( a11*a22*a33 + a12*a23*a31 + a13*a21*a32 -
 129   1                  a13*a22*a31 - a12*a21*a33 - a11*a23*a32 );
 130   1      }
 131          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
 132                      float  a21, float  a22, float  a23, float  a24,
 133                      float  a31, float  a32, float  a33, float  a34,
 134                      float  a41, float  a42, float  a43, float  a44 )
 135          {
 136   1        
 137   1          //return a11*(float)findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44);
 138   1          //return (float)findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44);
 139   1          //return (float)findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44);
 140   1          //return (float)findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43);
 141   1        //  return a21;
 142   1          return( a11*findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44) -
 143   1                  a12*findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44) +
 144   1                  a13*findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44) -
 145   1                  a14*findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43));
 146   1      }
 147              
 148          //===================================================== 
 149          
 150           
 151          //===================================================== 
 152          float  linear_interpolate(struct point p1,struct point p2, float  x)
 153          {
 154   1        float  fx;
 155   1        
 156   1        fx=-(p1.x-x)/(p1.x-p2.x)*(p1.y-p2.y)+p1.y;
 157   1        
 158   1        return fx;
 159   1      }
 160          
 161          
 162          
 163          void Update_position(unsigned char mnths,unsigned char dys,
 164                               unsigned char hurs,unsigned char mns,unsigned char sconds,
 165                               float  *currnt_pos, float offset_calib,float  *currnt_angle)
 166          {
 167   1        unsigned int date,i=0,yy=0;
 168   1        
 169   1        float  desired_distance=0,distance=0,angle_distance=0,JP_pos=0,angle,JP_angle=0;
 170   1        float  pos_interpolate_azimuth[num_of_azimuth_stamp],angle_interpolate_azimuth[num_of_azimuth_stamp],curr
             -ent_local_sun_time,azimuth, elevation,time_offset,UTC_time=-5;
 171   1        float declination;
 172   1        struct point p1,p2;
 173   1        struct cTime time;
 174   1        struct cLocation location;
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 4   

 175   1        struct cSunCoordinates *sunCoord;
 176   1        //hurs=hurs-1;// change to sun time
 177   1        //dys=dys+4;
 178   1        location.dLongitude=-73.6495;
 179   1        location.dLatitude=45.478889;
 180   1        time.iYear=2018;
 181   1        time.iMonth=BCDtoDec1(mnths);
 182   1        time.iDay=BCDtoDec1(dys);
 183   1        time.dHours=BCDtoDec1(hurs);
 184   1        time.dMinutes=BCDtoDec1(mns);
 185   1        time.dSeconds=BCDtoDec1(sconds&0x7f);
 186   1      
 187   1        
 188   1        desired_distance=*currnt_pos;
 189   1        angle=*currnt_angle;
 190   1        //date=Day_Of_Year(mnths,dys)+4;
 191   1        //date=237;
 192   1        declination=sunpos(time,location,&sunCoord)*180/pi;//+declination_offset;
*** WARNING C182 IN LINE 192 OF BipolarMotor.c: pointer to different objects
 193   1        time_offset=1/60*(4*(location.dLongitude-15*UTC_time)+9.87*sin(2*(360*(time.iDay-81)/365)*pi/180)    -   
             - 7.53*cos((360*(time.iDay-81)/365)*pi/180)    -   1.5*sin((360*(time.iDay-81)/365)*pi/180));
 194   1        current_local_sun_time=(float) (BCDtoDec1(hurs))+(float)BCDtoDec1(mns)/60+time_offset-1;//current time=su
             -n time= clock time -1
 195   1        //=B10-1/60*(4*($B$7-15*$B$4)+9.87*SIN(2*(360*($B$8-81)/365)*3.1416/180)    -    7.53*COS((360*($B$8-81)/
             -365)*3.1416/180)    -   1.5*SIN((360*($B$8-81)/365)*3.1416/180))
 196   1        elevation=(180/pi)*asin(             sin(location.dLatitude*pi/180)*sin(declination*pi/180)+
 197   1                  cos(location.dLatitude*pi/180)*cos(declination*pi/180)*cos((15*(current_local_sun_time-12))*pi/180) 
             -          );
 198   1        azimuth=180+(180/pi)*asin(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin
             -((90-elevation)*pi/180)          );// JP calculation
 199   1        //azimuth=(180/pi)*acos(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin((
             -90-elevation)*pi/180)          );// JP calculation
 200   1      
 201   1        
 202   1        if(BCDtoDec1(sconds&0x7f)%2==0)
 203   1        {
 204   2          // interpolate for azimuth
 205   2          for (i=0;i<num_of_azimuth_stamp;i++)
 206   2          {
 207   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 208   3            {
 209   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 210   4              {
 211   5                p1.x=date_azimuth_mapping[i];
 212   5                p2.x=date_azimuth_mapping[i+1];
 213   5                
 214   5                p1.y=RX_pos[yy][i];
 215   5                p2.y=RX_pos[yy][i+1];
 216   5                
 217   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 218   5              }
 219   4              //break;
 220   4            }
 221   3            else if ((azimuth<=date_azimuth_mapping_symmetry_side[i]) && (azimuth>=date_azimuth_mapping_symmetry_si
             -de[i+1]))
 222   3            {
 223   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 224   4              {
 225   5                p1.x=date_azimuth_mapping_symmetry_side[i];
 226   5                p2.x=date_azimuth_mapping_symmetry_side[i+1];
 227   5                
 228   5                p1.y=RX_pos[yy][i];
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 5   

 229   5                p2.y=RX_pos[yy][i+1];
 230   5                
 231   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 232   5              }
 233   4              //break;
 234   4            }
 235   3            
 236   3          }
 237   2      
 238   2          // interpolate for elevation
 239   2          for(i=0;i<num_of_elevation_stamp;i++)
 240   2          {
 241   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 242   3            {
 243   4              p1.x=elevation_stamp[i];
 244   4              p2.x=elevation_stamp[i+1];
 245   4              
 246   4              p1.y=pos_interpolate_azimuth[i];
 247   4              p2.y=pos_interpolate_azimuth[i+1];
 248   4              
 249   4              JP_pos=linear_interpolate(p1,p2,elevation);
 250   4              //break;
 251   4              
 252   4            }
 253   3            
 254   3          }
 255   2          
 256   2          desired_distance=elevation;// +offset_calib;
 257   2          
 258   2          distance=desired_distance-*currnt_pos;
 259   2          if(abs(distance)>0.5 | abs(previous_move_time-BCDtoDec1(sconds&0x7f))>30)// move if the change is more t
             -han 0.5mm OR >30s
 260   2          {
 261   3            if(distance>0)
 262   3              Move(distance,1,*currnt_pos);
 263   3            else if (distance<0)
 264   3              Move(-distance,0,*currnt_pos);
 265   3            previous_move_time=BCDtoDec1(sconds&0x7f);
 266   3            *currnt_pos=desired_distance;
 267   3          }
 268   2          
 269   2          //============================================================
 270   2          // MOVEMENT CONTROL FOR ANGLE ROTATION
 271   2          // Interpolate for azimuth
 272   2          //============================================================
 273   2          
 274   2          for (i=0;i<num_of_azimuth_stamp;i++)
 275   2          {
 276   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 277   3            {
 278   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 279   4              {
 280   5                p1.x=date_azimuth_mapping[i];
 281   5                p2.x=date_azimuth_mapping[i+1];
 282   5                
 283   5                p1.y=RX_angle[yy][i];
 284   5                p2.y=RX_angle[yy][i+1];
 285   5                
 286   5                angle_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 287   5              }
 288   4              //break;
 289   4            }
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 6   

 290   3            else if ((azimuth<=date_azimuth_mapping_symmetry_side[i]) && (azimuth>=date_azimuth_mapping_symmetry_si
             -de[i+1]))
 291   3            {
 292   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 293   4              {
 294   5                p1.x=date_azimuth_mapping_symmetry_side[i];
 295   5                p2.x=date_azimuth_mapping_symmetry_side[i+1];
 296   5                
 297   5                p1.y=RX_angle[yy][i];
 298   5                p2.y=RX_angle[yy][i+1];
 299   5                
 300   5                angle_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 301   5              }
 302   4              //break;
 303   4            }
 304   3            
 305   3          }
 306   2          // MOVEMENT CONTROL FOR ANGLE ROTATION
 307   2          // interpolate for elevation
 308   2          for(i=0;i<num_of_elevation_stamp;i++)
 309   2          {
 310   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 311   3            {
 312   4              p1.x=elevation_stamp[i];
 313   4              p2.x=elevation_stamp[i+1];
 314   4              
 315   4              p1.y=angle_interpolate_azimuth[i];
 316   4              p2.y=angle_interpolate_azimuth[i+1];
 317   4              
 318   4              JP_angle=linear_interpolate(p1,p2,elevation);
 319   4              //break;
 320   4              
 321   4            }
 322   3            
 323   3          }
 324   2              
 325   2          angle_distance=JP_angle-*currnt_angle;
 326   2          if(abs(angle_distance)>0.5 | abs(previous_move_time-BCDtoDec1(sconds&0x7f))>30)// move if the change is 
             -more than 0.5mm OR >30s
 327   2          {
 328   3            if(angle_distance>0)
 329   3              Move_2ndMotor(angle_distance,1,*currnt_angle);
 330   3            else if (angle_distance<0)
 331   3              Move_2ndMotor(-angle_distance,0,*currnt_angle);
 332   3            previous_move_time=BCDtoDec1(sconds&0x7f);
 333   3            *currnt_angle=JP_angle;
 334   3          }
 335   2          
 336   2        }
 337   1        return;
 338   1      
 339   1      }
*** WARNING C280 IN LINE 165 OF BipolarMotor.c: 'offset_calib': unreferenced local variable
*** WARNING C280 IN LINE 167 OF BipolarMotor.c: 'date': unreferenced local variable
 340          
 341          void Display_Pos(float sign_dat)
 342          {
 343   1        unsigned char unit, ten, hundred,thousand;
 344   1        unsigned char after_dot;
 345   1        int dat;
 346   1        dat=abs(sign_dat);
 347   1        if (sign_dat>0)
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 7   

 348   1          after_dot=(unsigned char)((sign_dat-dat)*10);
 349   1        else
 350   1          after_dot=(unsigned char)((-sign_dat-dat)*10);
 351   1        
 352   1        unit =dat%10;// remainder after division
 353   1        thousand=dat/1000;
 354   1        hundred=(dat-thousand*1000)/100;
 355   1        ten=(dat-thousand*1000-hundred*100)/10;
 356   1        if (sign_dat>=0)
 357   1        {
 358   2          WriteData(thousand|0x30);
 359   2          WriteData(hundred|0x30);
 360   2          WriteData(ten|0x30);
 361   2          WriteData(unit|0x30);
 362   2          WriteData(0x2E);//.
 363   2          WriteData((after_dot)|0x30);
 364   2          if(!selected_motor)
 365   2          {
 366   3            WriteData(0x6D);//m
 367   3            WriteData(0x6D);//m
 368   3            WriteData(0x20);// "blank"
 369   3            //WriteData(0x20);// "blank"
 370   3            //WriteData(0x20);// "blank"
 371   3          }
 372   2          else
 373   2          {
 374   3            WriteData(0xDF);// "blank"
 375   3            WriteData(0x20);// "blank"
 376   3            WriteData(0x20);// "blank"
 377   3          }
 378   2        }
 379   1        else
 380   1        {
 381   2          
 382   2          WriteData(0x2D);// "-"
 383   2          WriteData(thousand|0x30);
 384   2          WriteData(hundred|0x30);
 385   2          WriteData(ten|0x30);
 386   2          WriteData(unit|0x30);
 387   2          WriteData(0x2E);//"."
 388   2          WriteData(after_dot|0x30);
 389   2          if(!selected_motor)
 390   2          {
 391   3            WriteData(0x6D);//m
 392   3            WriteData(0x6D);//m
 393   3            WriteData(0x20);// "blank"
 394   3            //WriteData(0x20);// "blank"
 395   3            //WriteData(0x20);// "blank"
 396   3          }
 397   2          else
 398   2          {
 399   3            WriteData(0xDF);// "blank"
 400   3            WriteData(0x20);// "blank"
 401   3            WriteData(0x20);// "blank"
 402   3          }
 403   2          //WriteData(0x6D);//m
 404   2          //WriteData(0x6D);//m
 405   2      
 406   2        }
 407   1        return;
 408   1      }
 409          
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      11/02/2018 12:04:44 PAGE 8   

 410          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6088    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    971     361
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
