C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      01/29/2019 12:53:49 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BIPOLARMOTOR
OBJECT MODULE PLACED IN .\Obj\BipolarMotor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE BipolarMotor.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXT
                    -END PRINT(.\Lis\BipolarMotor.lst) TABS(2) OBJECT(.\Obj\BipolarMotor.obj)

line level    source

   1          #include "stc15f2k60s2.h"
   2          #include "LCD_Driver_SPLC780D.h"
   3          #include "Receiver_Position_Data.h"
   4          #include "math.h"
   5          #include "SunPos.h"
   6          #include "PI4IOE5V96248.h"
   7          
   8          
   9          //#include "PCF85963BTL.h"
  10          void Delay_ms(unsigned int ms);
  11          int Day_Of_Year(unsigned char months,unsigned char days);
  12          unsigned char BCDtoDec1(char bcd);
  13          void Write_PI4IOE5V96248(struct DATA_FOR_IO_6PORTS *xdat);
  14          float  degree;
  15          unsigned char previous_move_time=0;
  16          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
  17                      float  a21, float  a22, float  a23, float  a24,
  18                      float  a31, float  a32, float  a33, float  a34,
  19                      float  a41, float  a42, float  a43, float  a44 );
  20           float  findDet3x3( 
  21                      float  a11, float  a12, float  a13, 
  22                      float  a21, float  a22, float  a23,
  23                      float  a31, float  a32, float  a33 );           
  24          float
  25          cubic_interpolate (float *p1, float *p2, float *p3, float *p4, float x);
  26          
  27          struct DATA_FOR_IO_6PORTS dat;
  28          
  29          unsigned char BCDtoDec1(unsigned char bcd)
  30          {
  31   1        unsigned char hi,lo;
  32   1        hi=bcd>>4;
  33   1        lo=bcd&0x0F;
  34   1        return hi*10+lo;
  35   1      }
  36          // 
  37          void wait (void)  {                   /* wait function */
  38   1        ;                                   /* only to delay for LED flashes */
  39   1      }
  40          
  41          void vOneStepMove(bit bDir)
  42          {
  43   1        //unsigned char temp;
  44   1        if(bDir)  //pos direction
  45   1          {
  46   2            dat.port5=0x00|0x04;//port5.1 is used to move the motor, port5.0 is used to control the direction, 0x40
             - is used to set bit P52 (enable the motor driver)
  47   2            Write_PI4IOE5V96248(&dat);
  48   2            Delay_ms(2);
  49   2            dat.port5=0x02|0x04;
  50   2            Write_PI4IOE5V96248(&dat);
  51   2            Delay_ms(2);
  52   2            
  53   2          }
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      01/29/2019 12:53:49 PAGE 2   

  54   1        
  55   1        else      // neg direction
  56   1          {
  57   2            dat.port5=0x01|0x04;//port5.1 is used to move the motor, port5.0 is used to control the direction.
  58   2            Write_PI4IOE5V96248(&dat);
  59   2            Delay_ms(2);
  60   2            dat.port5=0x03|0x04;
  61   2            Write_PI4IOE5V96248(&dat);
  62   2            Delay_ms(2);
  63   2          }
  64   1        
  65   1      
  66   1        
  67   1      }
  68          
  69          void Step_move(unsigned int step, bit dir)
  70          {
  71   1      
  72   1            unsigned int i=0;
  73   1            //P3M1=0x00;
  74   1            //P3M0=0xFF;
  75   1            for(i=0;i<step;i++)
  76   1            {
  77   2                    vOneStepMove(dir);
  78   2                    //Wait_ms(30);
  79   2            }
  80   1      
  81   1      }
  82          
  83          void Move(float  distance, bit direction)
  84          {
  85   1          unsigned int step;
  86   1          //step= (unsigned int)(distance*337.5/3.14159);//
  87   1          step= (unsigned int)(distance*120);
  88   1          Step_move(step,direction);
  89   1      }
  90          //=====================================================
  91          //We need 4 points for cubic interpolation, p1[x],p1[y],..,p4[x],p4[y]
  92           float  findDet3x3( 
  93                      float  a11, float  a12, float  a13, 
  94                      float  a21, float  a22, float  a23,
  95                      float  a31, float  a32, float  a33 )
  96          {
  97   1          return( a11*a22*a33 + a12*a23*a31 + a13*a21*a32 -
  98   1                  a13*a22*a31 - a12*a21*a33 - a11*a23*a32 );
  99   1      }
 100          float  findDet4x4 (float  a11, float  a12, float  a13, float  a14, 
 101                      float  a21, float  a22, float  a23, float  a24,
 102                      float  a31, float  a32, float  a33, float  a34,
 103                      float  a41, float  a42, float  a43, float  a44 )
 104          {
 105   1        
 106   1          //return a11*(float)findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44);
 107   1          //return (float)findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44);
 108   1          //return (float)findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44);
 109   1          //return (float)findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43);
 110   1        //  return a21;
 111   1          return( a11*findDet3x3(a22, a23, a24, a32, a33, a34, a42, a43, a44) -
 112   1                  a12*findDet3x3(a21, a23, a24, a31, a33, a34, a41, a43, a44) +
 113   1                  a13*findDet3x3(a21, a22, a24, a31, a32, a34, a41, a42, a44) -
 114   1                  a14*findDet3x3(a21, a22, a23, a31, a32, a33, a41, a42, a43));
 115   1      }
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      01/29/2019 12:53:49 PAGE 3   

 116              
 117          //===================================================== 
 118          
 119           
 120          //===================================================== 
 121          float  linear_interpolate(struct point p1,struct point p2, float  x)
 122          {
 123   1        float  fx;
 124   1        
 125   1        fx=-(p1.x-x)/(p1.x-p2.x)*(p1.y-p2.y)+p1.y;
 126   1        
 127   1        return fx;
 128   1      }
 129          
 130          
 131          
 132          void Update_position(unsigned char mnths,unsigned char dys,
 133                               unsigned char hurs,unsigned char mns,unsigned char sconds,
 134                               float  *currnt_pos, float offset_calib)
 135          {
 136   1        unsigned int date,i=0,yy=0;
 137   1        //char num_of_elevation_stamp=15;
 138   1        float  desired_distance=0,distance=0,JP_pos=0;
 139   1        float  pos_interpolate_azimuth[num_of_azimuth_stamp],current_local_sun_time,azimuth, elevation,time_offse
             -t,UTC_time=-5;
 140   1        float declination;
 141   1        struct point p1,p2;
 142   1        struct cTime time;
 143   1        struct cLocation location;
 144   1        struct cSunCoordinates *sunCoord;
 145   1        //hurs=hurs-1;// change to sun time
 146   1        //dys=dys+4;
 147   1        location.dLongitude=-73.59;
 148   1        location.dLatitude=45.51;
 149   1        time.iYear=2019;
 150   1        time.iMonth=BCDtoDec1(mnths);
 151   1        time.iDay=BCDtoDec1(dys);
 152   1        time.dHours=BCDtoDec1(hurs)+5;
 153   1        time.dMinutes=BCDtoDec1(mns);
 154   1        time.dSeconds=BCDtoDec1(sconds&0x7f);
 155   1      
 156   1        
 157   1        desired_distance=*currnt_pos;
 158   1        
 159   1        //date=Day_Of_Year(mnths,dys)+4;
 160   1        //date=237;
 161   1        declination=sunpos(time,location,&sunCoord)*180/pi;//+declination_offset;
*** WARNING C182 IN LINE 161 OF BipolarMotor.c: pointer to different objects
 162   1        time_offset=(4*(location.dLongitude-15*UTC_time)+9.87*sin(2*(360*(time.iDay-81)/365)*pi/180)    -    7.53
             -*cos((360*(time.iDay-81)/365)*pi/180)    -   1.5*sin((360*(time.iDay-81)/365)*pi/180))/60;
 163   1        current_local_sun_time=(float) (BCDtoDec1(hurs))+(float)BCDtoDec1(mns)/60+time_offset;//-1;//current time
             -=sun time= clock time -1
 164   1        //=B10-1/60*(4*($B$7-15*$B$4)+9.87*SIN(2*(360*($B$8-81)/365)*3.1416/180)    -    7.53*COS((360*($B$8-81)/
             -365)*3.1416/180)    -   1.5*SIN((360*($B$8-81)/365)*3.1416/180))
 165   1        elevation=(180/pi)*asin(             sin(location.dLatitude*pi/180)*sin(declination*pi/180)+
 166   1                  cos(location.dLatitude*pi/180)*cos(declination*pi/180)*cos((15*(current_local_sun_time-12))*pi/180) 
             -          );
 167   1        azimuth=180+(180/pi)*asin(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin
             -((90-elevation)*pi/180)          );// JP calculation
 168   1        //azimuth=(180/pi)*acos(       sin((15*(current_local_sun_time-12))*pi/180)*cos(declination*pi/180)/sin((
             -90-elevation)*pi/180)          );// JP calculation
 169   1      
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      01/29/2019 12:53:49 PAGE 4   

 170   1        
 171   1        //if (current_local_sun_time>12)
 172   1        //  azimuth=360-azimuth;
 173   1        
 174   1        if(BCDtoDec1(sconds&0x7f)%2==0)
 175   1        {
 176   2          //if(elevation>=2.2 && elevation <=49.2)
 177   2          
 178   2          // interpolate for azimuth
 179   2          for (i=0;i<num_of_azimuth_stamp;i++)
 180   2          {
 181   3            if ((azimuth<=date_azimuth_mapping[i+1]) && (azimuth>=date_azimuth_mapping[i]))
 182   3            {
 183   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 184   4              {
 185   5                p1.x=date_azimuth_mapping[i];
 186   5                p2.x=date_azimuth_mapping[i+1];
 187   5                
 188   5                p1.y=RX_pos[yy][i];
 189   5                p2.y=RX_pos[yy][i+1];
 190   5                
 191   5                pos_interpolate_azimuth[yy]=linear_interpolate(p1,p2,azimuth);
 192   5              }
 193   4              //break;
 194   4            }
 195   3            
 196   3            else if ((azimuth>=low_date_azimuth_mapping[i+1]) && (azimuth<=low_date_azimuth_mapping[i]))
 197   3            {
 198   4              for (yy=0;yy<num_of_elevation_stamp;yy++)
 199   4              {
 200   5                p1.x=low_date_azimuth_mapping[i];
 201   5                p2.x=low_date_azimuth_mapping[i+1];
 202   5                
 203   5                p1.y=RX_pos[yy][i];
 204   5                p2.y=RX_pos[yy][i+1];
 205   5                
 206   5                pos_interpolate_azimuth[yy]=linear_interpolate(p2,p1,azimuth);
 207   5              }
 208   4              //break;
 209   4            }
 210   3          }
 211   2      
 212   2          // interpolate for elevation
 213   2          for(i=0;i<num_of_elevation_stamp;i++)
 214   2          {
 215   3            if((elevation>=elevation_stamp[i])&&(elevation<=elevation_stamp[i+1]))
 216   3            {
 217   4              p1.x=elevation_stamp[i];
 218   4              p2.x=elevation_stamp[i+1];
 219   4              
 220   4              p1.y=pos_interpolate_azimuth[i];
 221   4              p2.y=pos_interpolate_azimuth[i+1];
 222   4              
 223   4              JP_pos=linear_interpolate(p1,p2,elevation);
 224   4              //break;
 225   4              
 226   4            }
 227   3            
 228   3          }
 229   2          
 230   2          //desired_distance=JP_pos+71+offset_calib;
 231   2          
C51 COMPILER V9.52.0.0   BIPOLARMOTOR                                                      01/29/2019 12:53:49 PAGE 5   

 232   2      
 233   2          desired_distance=JP_pos+71+offset_calib;
 234   2          
 235   2          //desired_distance=azimuth;
 236   2          distance=desired_distance-*currnt_pos;
 237   2          if(abs(distance)>=0.5 && desired_distance>=-15 &&desired_distance<=210 )// move if the change is more th
             -an 0.5mm
 238   2          {
 239   3            /*if(distance>0)
 240   3              Move(distance,1);
 241   3            else if (distance<0)
 242   3              Move(-distance,0);*/
 243   3            //previous_move_time=BCDtoDec1(sconds&0x7f);
 244   3            *currnt_pos=desired_distance;
 245   3          }
 246   2        }
 247   1        return;
 248   1      
 249   1      }
*** WARNING C280 IN LINE 136 OF BipolarMotor.c: 'date': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4229    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    751     267
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
